package main

import (
	"github.com/google/gopacket"
	"github.com/google/gopacket/layers"
	"github.com/vishvananda/netlink"
	"log"
)

const ifaceName = "pwn0"

func createDummyIface(ip string) error {
	la := netlink.NewLinkAttrs()
	la.Name = ifaceName
	iface := &netlink.Dummy{LinkAttrs: la}
	if err := netlink.LinkAdd(iface); err != nil {
		log.Fatal(err)
	}

	// Add IP address to the interface
	addr, err := netlink.ParseAddr(ip + "/32")
	if err != nil {
		return err
	}
	if err := netlink.AddrAdd(iface, addr); err != nil {
		return err
	}

	// Set interface up
	if err := netlink.LinkSetUp(iface); err != nil {
		return err
	}

	return nil
}

func teardownIface() error {
	iface, err := netlink.LinkByName(ifaceName)
	if err != nil {
		return err
	}
	return netlink.LinkDel(iface)
}

// dnsPacket generates a DNS packet with the given domain name and message ID
func dnsPacket(txt string, id uint16) ([]byte, error) {
	var answer layers.DNSResourceRecord
	answer.Type = layers.DNSTypeTXT
	answer.Class = layers.DNSClassIN
	answer.TTL = 86400
	answer.TXTs = [][]byte{[]byte(txt)}

	reply := new(layers.DNS)
	reply.QR = true
	reply.ANCount = 1
	reply.OpCode = layers.DNSOpCodeNotify
	reply.AA = true
	reply.ID = id
	reply.Answers = []layers.DNSResourceRecord{answer}
	reply.ResponseCode = layers.DNSResponseCodeNoErr
	buf := gopacket.NewSerializeBuffer()
	if err := reply.SerializeTo(buf, gopacket.SerializeOptions{}); err != nil {
		return nil, err
	}

	log.Printf("Serialized DNS response for %s %s id %d", answer.Type, answer.TXTs, reply.ID)

	return buf.Bytes(), nil
}
