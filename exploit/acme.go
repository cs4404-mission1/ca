package main

import (
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)

const acmeServer = "https://ca.internal"

// token gets the DNS validation token
func token(domain string) string {
	// Query the server for a token
	resp, err := http.Post(acmeServer+"/request?domain="+domain, "text/plain", nil)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	return string(body)
}

// validate requests the validation of a domain's ACME challenge
func validate(domain string) {
	resp, err := http.Post(acmeServer+"/validate?domain="+domain, "text/plain", nil)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal(err)
	}

	parts := strings.Split(string(body), ";")
	if len(parts) != 2 {
		log.Fatalf("Invalid response:\n%s", body)
	}

	// Write cert and key to files
	if err := os.WriteFile(domain+"-crt.pem", []byte(parts[0]), 0644); err != nil {
		log.Fatal(err)
	}
	if err := os.WriteFile(domain+"-key.pem", []byte(parts[1]), 0644); err != nil {
		log.Fatal(err)
	}
	log.Printf("Wrote %s-crt.pem and %s-key.pem", domain, domain)
}
